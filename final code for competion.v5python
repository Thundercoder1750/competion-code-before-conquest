{"mode":"Text","textContent":"#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain=Brain()\n\n# Robot configuration code\n# vex-vision-config:begin\nvision_5__BLUEBOX = Signature(1, -6449, -4915, -5682,-5989, -4201, -5095,3.9, 0)\nvision_5__REDBOX = Signature(2, 12863, 15019, 13941,-345, 275, -35,3, 0)\nvision_5__GREENBOX = Signature(3, -5149, -5041, -5096,-923, -687, -804,11, 0)\nvision_5__BLUEBOX = Signature(4, -6241, -3379, -4810,-6589, -2721, -4655,2.9, 0)\nvision_5__SIG_5 = Signature(5, 0, 0, 0,0, 0, 0,3, 0)\nvision_5 = Vision(Ports.PORT5, 50, vision_5__BLUEBOX, vision_5__REDBOX, vision_5__GREENBOX, vision_5__BLUEBOX, vision_5__SIG_5)\n# vex-vision-config:end\nleft_motor_a = Motor(Ports.PORT1, GearSetting.RATIO_18_1, True)\nleft_motor_b = Motor(Ports.PORT2, GearSetting.RATIO_18_1, True)\nleft_drive_smart = MotorGroup(left_motor_a, left_motor_b)\nright_motor_a = Motor(Ports.PORT3, GearSetting.RATIO_18_1, False)\nright_motor_b = Motor(Ports.PORT4, GearSetting.RATIO_18_1, False)\nright_drive_smart = MotorGroup(right_motor_a, right_motor_b)\ndrivetrain_inertial = Inertial(Ports.PORT20)\ndrivetrain = SmartDrive(left_drive_smart, right_drive_smart, drivetrain_inertial, 319.19, 320, 40, MM, 1)\nintake = Motor(Ports.PORT6, GearSetting.RATIO_18_1, True)\ncontroller_1 = Controller(PRIMARY)\nA = Limit(brain.three_wire_port.h)\noptical_7 = Optical(Ports.PORT7)\n\n\n# wait for rotation sensor to fully initialize\nwait(30, MSEC)\n\ndef calibrate_drivetrain():\n    # Calibrate the Drivetrain Inertial\n    sleep(200, MSEC)\n    brain.screen.print(\"Calibrating\")\n    brain.screen.next_row()\n    brain.screen.print(\"Inertial\")\n    drivetrain_inertial.calibrate()\n    while drivetrain_inertial.is_calibrating():\n        sleep(25, MSEC)\n    brain.screen.clear_screen()\n    brain.screen.set_cursor(1, 1)\n\n\ndef play_vexcode_sound(sound_name):\n    # Helper to make playing sounds from the V5 in VEXcode easier and\n    # keeps the code cleaner by making it clear what is happening.\n    print(\"VEXPlaySound:\" + sound_name)\n    wait(5, MSEC)\n\n# add a small delay to make sure we don't print in the middle of the REPL header\nwait(200, MSEC)\n# clear the console to make sure we don't have the REPL in the console\nprint(\"\\033[2J\")\n\n#endregion VEXcode Generated Robot Configuration\n\n\n# ----------------------------------------------------------------------------\n# \n#    Project:        Detecting Objects (Vision)\n#    Description:    This project will detect 3 different colored objects\n#                    and display when each object is found on the V5\n#                    Brain's screen.\n#    Configuration:  Vision5 on Port 5\n# \n# ----------------------------------------------------------------------------\n\n# Library imports\nfrom vex import *\n\n# Begin project code\ncheck_red = Event()\ncheck_blue = Event()\ncheck_green = Event()\nleft_motor_a.set_velocity(20,PERCENT)\nright_motor_a.set_velocity(20,PERCENT)\nleft_motor_b.set_velocity(40,PERCENT)\nright_motor_b.set_velocity(40,PERCENT)\nintake.set_velocity(80,PERCENT)\n\n# Will check to see if there is a blue object in view of the vision\n# sensor and display the result on line 1 on the V5 Brain's screen\n\ncheck_blue = Event()\ndef autonomous():\n    intake.spin(REVERSE)\n    wait(3,SECONDS)\n    drivetrain.turn(LEFT)\n    wait(1,SECONDS)\n    intake.spin(FORWARD)\n    def has_blue_callback():\n        brain.screen.clear_row(1)\n        brain.screen.set_cursor(1, 1)\n        vexcode_vision_5_objects = vision_5.take_snapshot(vision_5__BLUEBOX)\n        if vexcode_vision_5_objects and len(vexcode_vision_5_objects) > 0:\n            if vision_5.largest_object().centerX < 154 - 10:\n                left_motor_a.spin(REVERSE)\n                right_motor_a.spin(FORWARD)\n                brain.screen.print(\"Blue Object Found\")\n            elif vision_5.largest_object().centerX > 154 + 10:\n                left_motor_a.spin(FORWARD)\n                right_motor_a.spin(REVERSE)\n            elif vision_5.largest_object().centerX <=154 + 10:\n                left_motor_a.set_velocity(40,PERCENT)\n                right_motor_a.set_velocity(40,PERCENT)\n                left_motor_a.spin(FORWARD)\n                right_motor_a.spin(FORWARD)\n                left_motor_b.spin(FORWARD)\n                right_motor_b.spin(FORWARD)\n            elif vision_5.largest_object().height > 100:\n                left_motor_a.stop()\n                right_motor_a.stop()\n                left_motor_b.stop()\n                right_motor_b.stop()\n            else:\n                drivetrain.stop()\n        else:\n            drivetrain.stop()\n    check_blue(has_blue_callback)\n    \n    while True:\n        check_blue.broadcast_and_wait()\n        check_red.broadcast_and_wait()\n        check_green.broadcast_and_wait()\n        if A.pressing():\n                left_motor_a.stop()\n                right_motor_a.stop()\n                left_motor_b.stop()\n                right_motor_b.stop()\n            \n# Will check to see if there is a red object in view of the vision\n# sensor and display the result on line 3 on the V5 Brain's screen\n\n# register event handlers\n\n# small delay to ensure that the event handlers are ready to be used\n# set the print font for all future prints to the V5 screen\nbrain.screen.set_font(FontType.MONO40)\n\n# constantly runs to check for new sensor data\ndef driver_control():\n    left_motor_a.set_velocity(100,PERCENT)\n    right_motor_a.set_velocity(100,PERCENT)\n    left_motor_b.set_velocity(100,PERCENT)\n    right_motor_b.set_velocity(100,PERCENT)\n    while True:\n        left_motor_a.set_velocity((controller_1.axis3.position() + controller_1.axis4.position() + controller_1.axis1.position()), PERCENT)\n        left_motor_a.spin(FORWARD)\n        right_motor_a.set_velocity((controller_1.axis3.position() - controller_1.axis4.position() - controller_1.axis1.position()), PERCENT)\n        right_motor_a.spin(FORWARD)\n        left_motor_b.set_velocity((controller_1.axis3.position() - controller_1.axis4.position() + controller_1.axis1.position()), PERCENT)\n        left_motor_b.spin(FORWARD)\n        right_motor_b.set_velocity((controller_1.axis3.position() + controller_1.axis4.position() - controller_1.axis1.position()), PERCENT)\n        right_motor_b.spin(FORWARD)\n        wait(0.1, SECONDS)\n        if controller_1.buttonB.pressing():\n            intake.spin(REVERSE)\n        elif A.pressing():\n            intake.stop()\n        else:\n            intake.spin(FORWARD)\n    wait(20,MSEC)\ncompetition = Competition(driver_control, autonomous)\n","textLanguage":"python","rconfig":[{"port":[5],"name":"vision_5","customName":false,"deviceType":"Vision","deviceClass":"vision","setting":{"config":"{\"config\":{\"brightness\":50,\"signatures\":[{\"name\":\"BLUEBOX\",\"parameters\":{\"uMin\":-6449,\"uMax\":-4915,\"uMean\":-5682,\"vMin\":-5989,\"vMax\":-4201,\"vMean\":-5095,\"rgb\":1,\"type\":0,\"name\":\"BLUEBOX\"},\"range\":3.9},{\"name\":\"REDBOX\",\"parameters\":{\"uMin\":12863,\"uMax\":15019,\"uMean\":13941,\"vMin\":-345,\"vMax\":275,\"vMean\":-35,\"rgb\":1,\"type\":0,\"name\":\"REDBOX\"},\"range\":3},{\"name\":\"GREENBOX\",\"parameters\":{\"uMin\":-5149,\"uMax\":-5041,\"uMean\":-5096,\"vMin\":-923,\"vMax\":-687,\"vMean\":-804,\"rgb\":1,\"type\":0,\"name\":\"GREENBOX\"},\"range\":11},{\"name\":\"BLUEBOX\",\"parameters\":{\"uMin\":-6241,\"uMax\":-3379,\"uMean\":-4810,\"vMin\":-6589,\"vMax\":-2721,\"vMean\":-4655,\"rgb\":1,\"type\":0,\"name\":\"BLUEBOX\"},\"range\":2.9},{\"name\":\"SIG_5\",\"parameters\":{\"uMin\":0,\"uMax\":0,\"uMean\":0,\"vMin\":0,\"vMax\":0,\"vMean\":0,\"rgb\":0,\"type\":0,\"name\":\"SIG_5\"},\"range\":3},{\"name\":\"SIG_6\",\"parameters\":{\"uMin\":0,\"uMax\":0,\"uMean\":0,\"vMin\":0,\"vMax\":0,\"vMean\":0,\"rgb\":0,\"type\":0,\"name\":\"SIG_6\"},\"range\":2.5},{\"name\":\"SIG_7\",\"parameters\":{\"uMin\":0,\"uMax\":0,\"uMean\":0,\"vMin\":0,\"vMax\":0,\"vMean\":0,\"rgb\":0,\"type\":0,\"name\":\"SIG_7\"},\"range\":2.5}],\"codes\":[]}}","isConfigured":"false"},"triportSourcePort":22},{"port":[1,2,3,4,20],"name":"drivetrain","customName":false,"deviceType":"Drivetrain","deviceClass":"smartdrive","setting":{"type":"4-motor","wheelSize":"wheel4in","gear":"ratio18_1","gearRatio":"1:1","direction":"rev","gyroType":"inertial","width":"295","unit":"mm","wheelbase":"40","wheelbaseUnit":"mm","xOffset":"0","xOffsetUnit":"mm","yOffset":"0","yOffsetUnit":"mm","thetaOffset":"180"},"triportSourcePort":null},{"port":[6],"name":"intake","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[],"name":"controller_1","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","upDown":"","upDownDir":"false","xB":"","xBDir":"false","drive":"none","id":"primary"},"triportSourcePort":22},{"port":[8],"name":"A","customName":true,"deviceType":"LimitSwitch","deviceClass":"limit","setting":{"id":"partner"},"triportSourcePort":22},{"port":[7],"name":"optical_7","customName":false,"deviceType":"Optical","deviceClass":"optical","setting":{"id":"partner"}}],"slot":1,"platform":"V5","sdkVersion":"20220726.10.00.00","appVersion":"3.0.4","minVersion":"3.0.0","fileFormat":"1.2.0","icon":"","targetBrainGen":"First","v5Sounds":[{"name":"game over","url":"static/sounds/mixkit-arcade-retro-game-over-213.wav"}],"v5SoundsEnabled":false,"target":"Physical"}